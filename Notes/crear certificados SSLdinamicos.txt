A continuación te muestro cómo podrías integrar acme.sh para la emisión/renovación de certificados y la carga dinámica de estos en OpenResty.

Flujo General
Emisión/Renovación con acme.sh:

Cuando se añade un nuevo dominio, ejecutas acme.sh para emitir un certificado para ese dominio.

acme.sh guarda los certificados (por defecto, en ~/.acme.sh/<dominio>/) y puede configurarse para renovar automáticamente mediante cron.

Para facilitar la integración, puedes copiar o vincular (symlink) los certificados a una carpeta común, por ejemplo, /etc/nginx/ssl/, usando un nombre basado en el dominio (por ejemplo, example.com.crt y example.com.key).

Carga dinámica en OpenResty:

Configuras OpenResty para que, en cada conexión SSL, ejecute un bloque Lua (con ssl_certificate_by_lua_block).

Ese bloque lee el dominio solicitado (SNI) y busca en el sistema el certificado y la llave correspondientes.

Se convierten los archivos en formato PEM a DER (formato requerido por OpenResty) y se cargan para la conexión.

Ejemplo Práctico
1. Configuración de acme.sh
Supongamos que quieres emitir un certificado para example.com usando el método webroot. Ejecutarías:

bash
Copiar
acme.sh --issue -d example.com --webroot /var/www/example --keylength ec-256
Luego, para copiar los certificados a una carpeta común (por ejemplo, /etc/nginx/ssl/), podrías crear un script o configurar un hook de deploy:

bash
Copiar
acme.sh --deploy -d example.com --deploy-hook cp -f ~/.acme.sh/example.com/example.com.cer /etc/nginx/ssl/example.com.crt && cp -f ~/.acme.sh/example.com/example.com.key /etc/nginx/ssl/example.com.key
Asegúrate de ajustar permisos y rutas según tu entorno. Además, instala el cronjob que acme.sh recomienda para renovar automáticamente los certificados:

bash
Copiar
acme.sh --install-cronjob
2. Configuración de OpenResty con Carga Dinámica
Crea un bloque en tu configuración de OpenResty (por ejemplo, en nginx.conf) que utilice ssl_certificate_by_lua_block para cargar los certificados según el dominio solicitado:

nginx
Copiar
server {
    listen 443 ssl;
    server_name _;  # Captura cualquier dominio

    # Configuraciones básicas de SSL
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Bloque Lua para cargar certificados dinámicamente
    ssl_certificate_by_lua_block {
        local ssl = require("ngx.ssl")
        local domain = ngx.var.host  -- Obtiene el dominio solicitado por SNI

        -- Construye las rutas a los archivos de certificado y llave
        local cert_file = "/etc/nginx/ssl/" .. domain .. ".crt"
        local key_file  = "/etc/nginx/ssl/" .. domain .. ".key"

        -- Función para leer un archivo completo
        local function read_file(path)
            local file, err = io.open(path, "r")
            if not file then
                ngx.log(ngx.ERR, "Error al abrir ", path, ": ", err)
                return nil, err
            end
            local content = file:read("*a")
            file:close()
            return content
        end

        local cert, err = read_file(cert_file)
        if not cert then
            ngx.log(ngx.ERR, "No se pudo leer el certificado para ", domain)
            return ngx.exit(ngx.ERROR)
        end

        local key, err = read_file(key_file)
        if not key then
            ngx.log(ngx.ERR, "No se pudo leer la llave para ", domain)
            return ngx.exit(ngx.ERROR)
        end

        -- Convertir los certificados de PEM a DER
        local der_cert, err = ssl.cert_pem_to_der(cert)
        if not der_cert then
            ngx.log(ngx.ERR, "Error al convertir el certificado de PEM a DER: ", err)
            return ngx.exit(ngx.ERROR)
        end

        local der_key, err = ssl.priv_key_pem_to_der(key)
        if not der_key then
            ngx.log(ngx.ERR, "Error al convertir la llave de PEM a DER: ", err)
            return ngx.exit(ngx.ERROR)
        end

        -- Limpiar cualquier certificado previamente cargado
        local ok, err = ssl.clear_certs()
        if not ok then
            ngx.log(ngx.ERR, "Error al limpiar certificados: ", err)
            return ngx.exit(ngx.ERROR)
        end

        -- Establecer el certificado y la llave para la conexión
        ok, err = ssl.set_der_cert(der_cert)
        if not ok then
            ngx.log(ngx.ERR, "Error al establecer el certificado: ", err)
            return ngx.exit(ngx.ERROR)
        end

        ok, err = ssl.set_der_priv_key(der_key)
        if not ok then
            ngx.log(ngx.ERR, "Error al establecer la llave: ", err)
            return ngx.exit(ngx.ERROR)
        end
    }

    # Bloque location para servir contenido
    location / {
        root /var/www/html;
        index index.html;
    }
}
Consideraciones Finales
Automatización Total:
Integra el proceso de emisión de acme.sh con la copia o enlace simbólico de certificados en la carpeta que usa OpenResty. Así, cuando se agrega un dominio, se emite y se actualiza el certificado sin intervención manual.

Caché en Lua (Opcional):
Para evitar leer y convertir el certificado en cada conexión, podrías implementar un mecanismo de caché en Lua. Esto mejora el rendimiento en entornos de alto tráfico.

Manejo de Errores y Fallback:
Es aconsejable definir un certificado por defecto o un mecanismo de fallback si no se encuentra el certificado para un dominio solicitado, para evitar fallos en la conexión.

Permisos y Seguridad:
Asegúrate de que la carpeta donde se almacenan los certificados sea accesible por OpenResty pero que cumpla con las políticas de seguridad adecuadas.

Con este enfoque, acme.sh se encarga de la emisión y renovación automática, mientras que OpenResty carga dinámicamente el certificado correcto según el dominio solicitado, permitiendo escalar de forma flexible a medida que tus clientes agreguen nuevos dominios. ¿Necesitas profundizar en algún aspecto adicional o algún detalle en la implementación?